/// Convenience macros for common message operations with conditional tracing support
use std::sync::OnceLock;

static DEBUG_MODE: OnceLock<bool> = OnceLock::new();

/// Check if debug mode is enabled (cached for performance)
#[doc(hidden)]
pub fn is_debug_mode() -> bool {
    *DEBUG_MODE.get_or_init(|| std::env::var("KASL_DEBUG").is_ok() || std::env::var("RUST_LOG").is_ok())
}

/// Print a message (info level)
#[macro_export]
macro_rules! msg_print {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("{}", $msg);
        } else {
            println!("{}", $msg);
        }
    };
    ($msg:expr, true) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("\n{}\n", $msg);
        } else {
            println!("\n{}\n", $msg);
        }
    };
}

/// Print a success message with ‚úÖ prefix
#[macro_export]
macro_rules! msg_success {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("‚úÖ {}", $msg);
        } else {
            println!("‚úÖ {}", $msg);
        }
    };
    ($msg:expr, true) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("\n‚úÖ {}\n", $msg);
        } else {
            println!("\n‚úÖ {}\n", $msg);
        }
    };
}

/// Print an error message with ‚ùå prefix
#[macro_export]
macro_rules! msg_error {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::error!("‚ùå {}", $msg);
        } else {
            eprintln!("‚ùå {}", $msg);
        }
    };
    ($msg:expr, true) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::error!("\n‚ùå {}\n", $msg);
        } else {
            eprintln!("\n‚ùå {}\n", $msg);
        }
    };
}

/// Print a warning message with ‚ö†Ô∏è prefix
#[macro_export]
macro_rules! msg_warning {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::warn!("‚ö†Ô∏è {}", $msg);
        } else {
            println!("‚ö†Ô∏è {}", $msg);
        }
    };
    ($msg:expr, true) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::warn!("\n‚ö†Ô∏è {}\n", $msg);
        } else {
            println!("\n‚ö†Ô∏è {}\n", $msg);
        }
    };
}

/// Print an info message with ‚ÑπÔ∏è prefix
#[macro_export]
macro_rules! msg_info {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("‚ÑπÔ∏è {}", $msg);
        } else {
            println!("‚ÑπÔ∏è {}", $msg);
        }
    };
    ($msg:expr, true) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::info!("\n‚ÑπÔ∏è {}\n", $msg);
        } else {
            println!("\n‚ÑπÔ∏è {}\n", $msg);
        }
    };
}

/// Debug message - only shown when debug mode is enabled
#[macro_export]
macro_rules! msg_debug {
    ($msg:expr) => {
        if $crate::libs::messages::macros::is_debug_mode() {
            tracing::debug!("üîç {}", $msg);
        }
    };
}

/// Create an anyhow error from a message
#[macro_export]
macro_rules! msg_error_anyhow {
    ($msg:expr) => {
        anyhow::anyhow!("‚ùå {}", $msg)
    };
}

/// Bail with a message error
#[macro_export]
macro_rules! msg_bail_anyhow {
    ($msg:expr) => {
        anyhow::bail!("‚ùå {}", $msg)
    };
}
